[gd_scene load_steps=9 format=4 uid="uid://r3gj6m6ykevx"]

[ext_resource type="Texture2D" uid="uid://cpoa888dyd3m" path="res://Assets/Level 1/objects/uploads_files_3523647_shapespark-low-poly-plants-kit_grass-01.png" id="1_rnoak"]
[ext_resource type="Texture2D" uid="uid://dkbue5kdsbwjh" path="res://Assets/Level 1/objects/uploads_files_3523647_shapespark-low-poly-plants-kit_grass-02.png" id="2_u0y5x"]

[sub_resource type="Shader" id="Shader_m572h"]
code = "// NOTE: Shader automatically converted from Godot Engine 4.3.stable's StandardMaterial3D.

shader_type spatial;
render_mode blend_mix, depth_draw_opaque, cull_disabled, diffuse_lambert_wrap, specular_disabled;

uniform vec4 albedo : source_color;
uniform sampler2D texture_albedo : source_color, filter_linear_mipmap, repeat_enable;
uniform float alpha_scissor_threshold : hint_range(0.0, 1.0, 0.001);
uniform float point_size : hint_range(0.1, 128.0, 0.1);

uniform float roughness : hint_range(0.0, 1.0);
uniform sampler2D texture_metallic : hint_default_white, filter_linear_mipmap, repeat_enable;
uniform vec4 metallic_texture_channel;
uniform sampler2D texture_roughness : hint_roughness_r, filter_linear_mipmap, repeat_enable;

uniform float specular : hint_range(0.0, 1.0, 0.01);
uniform float metallic : hint_range(0.0, 1.0, 0.01);

uniform sampler2D texture_emission : source_color, hint_default_black, filter_linear_mipmap, repeat_enable;
uniform vec4 emission : source_color;
uniform float emission_energy : hint_range(0.0, 100.0, 0.01);

uniform vec3 uv1_scale;
uniform vec3 uv1_offset;
uniform vec3 uv2_scale;
uniform vec3 uv2_offset;
uniform float sway_speed = 1.5;
uniform float sway_strength = 1.5;
uniform float sway_phase_len = 1.5;

uniform float wind_strength : hint_range(0.0, 10.0) = 0.01;
uniform float wind_speed : hint_range(0.0, 10.0) = 1.0;
const vec3 wind_direction = vec3(0.0, 0.1, 0.0);  // Wind direction in world space
uniform float random_seed : hint_range(0.0, 1.0) = 0.0;  // Random seed for variation


void vertex() {
	UV = UV * uv1_scale.xy + uv1_offset.xy;
		float time = TIME * 1.0; // TIME is a constant value from the engine
		float strength = COLOR.r * sway_strength;
		float body = (VERTEX.y + 1.0) / 20.0; // for this tree, body goes from 1.0 to 10.0
    VERTEX.x += sin(VERTEX.x * sway_phase_len * 1.123 + TIME * sway_speed + random_seed) * strength * 0.01;
    VERTEX.y += sin(VERTEX.y * sway_phase_len + TIME * sway_speed * 1.12412 + random_seed) * strength * 0.01;
    VERTEX.z += sin(VERTEX.z * sway_phase_len * 0.9123 + TIME * sway_speed * 1.3123 + random_seed) * strength * 0.01;
	
// Calculate the wind effect using a sine wave based on time
    float wind_angle = sin(TIME + random_seed) * wind_speed * wind_strength * 0.5;

    // Normalize the wind direction to ensure it's a unit vector
    vec3 normalized_wind_dir = normalize(wind_direction);

    // Calculate the rotation matrix using the axis-angle formula
    mat3 rotation_matrix;
    float c = cos(wind_angle);
    float s = sin(wind_angle);
    float t = 1.0 - c;

    rotation_matrix[0] = vec3(t * normalized_wind_dir.x * normalized_wind_dir.x + c,
                              t * normalized_wind_dir.x * normalized_wind_dir.y - s * normalized_wind_dir.z,
                              t * normalized_wind_dir.x * normalized_wind_dir.z + s * normalized_wind_dir.y);

    rotation_matrix[1] = vec3(t * normalized_wind_dir.x * normalized_wind_dir.y + s * normalized_wind_dir.z,
                              t * normalized_wind_dir.y * normalized_wind_dir.y + c,
                              t * normalized_wind_dir.y * normalized_wind_dir.z - s * normalized_wind_dir.x);

    rotation_matrix[2] = vec3(t * normalized_wind_dir.x * normalized_wind_dir.z - s * normalized_wind_dir.y,
                              t * normalized_wind_dir.y * normalized_wind_dir.z + s * normalized_wind_dir.x,
                              t * normalized_wind_dir.z * normalized_wind_dir.z + c);

    // Apply the rotation matrix to the vertex position
    VERTEX = (rotation_matrix * VERTEX.xyz);
}

void fragment() {
	vec2 base_uv = UV;

	vec4 albedo_tex = texture(texture_albedo, base_uv);

	// Vertex Color Use as Albedo: Enabled
	albedo_tex *= COLOR;

	ALBEDO = albedo.rgb * albedo_tex.rgb;

	float metallic_tex = dot(texture(texture_metallic, base_uv), metallic_texture_channel);
	METALLIC = metallic_tex * metallic;
	SPECULAR = specular;

	vec4 roughness_texture_channel = vec4(1.0, 0.0, 0.0, 0.0);
	float roughness_tex = dot(texture(texture_roughness, base_uv), roughness_texture_channel);
	ROUGHNESS = roughness_tex * roughness;

	// Emission: Enabled
	vec3 emission_tex = texture(texture_emission, base_uv).rgb;
	// Emission Operator: Add
	EMISSION = (emission.rgb + emission_tex) * emission_energy;
	ALPHA *= albedo.a * albedo_tex.a;
	ALPHA_SCISSOR_THRESHOLD = alpha_scissor_threshold;
}
"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_kiecd"]
resource_name = "high-grass-1-01"
render_priority = 0
shader = SubResource("Shader_m572h")
shader_parameter/albedo = Color(1, 1, 1, 1)
shader_parameter/alpha_scissor_threshold = 0.5
shader_parameter/point_size = 1.0
shader_parameter/roughness = 0.2
shader_parameter/metallic_texture_channel = null
shader_parameter/specular = 0.0
shader_parameter/metallic = 0.0
shader_parameter/emission = null
shader_parameter/emission_energy = null
shader_parameter/uv1_scale = Vector3(1, 1, 1)
shader_parameter/uv1_offset = Vector3(0, 0, 0)
shader_parameter/uv2_scale = Vector3(1, 1, 1)
shader_parameter/uv2_offset = Vector3(0, 0, 0)
shader_parameter/sway_speed = 1.5
shader_parameter/sway_strength = 1.5
shader_parameter/sway_phase_len = 1.5
shader_parameter/wind_strength = 0.01
shader_parameter/wind_speed = 1.0
shader_parameter/random_seed = 0.0
shader_parameter/texture_albedo = ExtResource("1_rnoak")

[sub_resource type="Shader" id="Shader_bgchw"]
code = "// NOTE: Shader automatically converted from Godot Engine 4.3.stable's StandardMaterial3D.

shader_type spatial;
render_mode blend_mix, depth_draw_opaque, cull_disabled, diffuse_lambert_wrap, specular_disabled;

uniform vec4 albedo : source_color;
uniform sampler2D texture_albedo : source_color, filter_linear_mipmap, repeat_enable;
uniform float alpha_scissor_threshold : hint_range(0.0, 1.0, 0.001);
uniform float point_size : hint_range(0.1, 128.0, 0.1);

uniform float roughness : hint_range(0.0, 1.0);
uniform sampler2D texture_metallic : hint_default_white, filter_linear_mipmap, repeat_enable;
uniform vec4 metallic_texture_channel;
uniform sampler2D texture_roughness : hint_roughness_r, filter_linear_mipmap, repeat_enable;

uniform float specular : hint_range(0.0, 1.0, 0.01);
uniform float metallic : hint_range(0.0, 1.0, 0.01);

uniform sampler2D texture_emission : source_color, hint_default_black, filter_linear_mipmap, repeat_enable;
uniform vec4 emission : source_color;
uniform float emission_energy : hint_range(0.0, 100.0, 0.01);

uniform vec3 uv1_scale;
uniform vec3 uv1_offset;
uniform vec3 uv2_scale;
uniform vec3 uv2_offset;
uniform float sway_speed = 1.5;
uniform float sway_strength = 1.5;
uniform float sway_phase_len = 1.5;

uniform float wind_strength : hint_range(0.0, 10.0) = 0.01;
uniform float wind_speed : hint_range(0.0, 10.0) = 1.0;
const vec3 wind_direction = vec3(0.0, 0.1, 0.0);  // Wind direction in world space
uniform float random_seed : hint_range(0.0, 1.0) = 0.0;  // Random seed for variation


void vertex() {
	UV = UV * uv1_scale.xy + uv1_offset.xy;
		float time = TIME * 1.0; // TIME is a constant value from the engine
		float strength = COLOR.r * sway_strength;
		float body = (VERTEX.y + 1.0) / 20.0; // for this tree, body goes from 1.0 to 10.0
    VERTEX.x += sin(VERTEX.x * sway_phase_len * 1.123 + TIME * sway_speed + random_seed) * strength * 0.01;
    VERTEX.y += sin(VERTEX.y * sway_phase_len + TIME * sway_speed * 1.12412 + random_seed) * strength * 0.01;
    VERTEX.z += sin(VERTEX.z * sway_phase_len * 0.9123 + TIME * sway_speed * 1.3123 + random_seed) * strength * 0.01;
	
// Calculate the wind effect using a sine wave based on time
    float wind_angle = sin(TIME + random_seed) * wind_speed * wind_strength * 0.5;

    // Normalize the wind direction to ensure it's a unit vector
    vec3 normalized_wind_dir = normalize(wind_direction);

    // Calculate the rotation matrix using the axis-angle formula
    mat3 rotation_matrix;
    float c = cos(wind_angle);
    float s = sin(wind_angle);
    float t = 1.0 - c;

    rotation_matrix[0] = vec3(t * normalized_wind_dir.x * normalized_wind_dir.x + c,
                              t * normalized_wind_dir.x * normalized_wind_dir.y - s * normalized_wind_dir.z,
                              t * normalized_wind_dir.x * normalized_wind_dir.z + s * normalized_wind_dir.y);

    rotation_matrix[1] = vec3(t * normalized_wind_dir.x * normalized_wind_dir.y + s * normalized_wind_dir.z,
                              t * normalized_wind_dir.y * normalized_wind_dir.y + c,
                              t * normalized_wind_dir.y * normalized_wind_dir.z - s * normalized_wind_dir.x);

    rotation_matrix[2] = vec3(t * normalized_wind_dir.x * normalized_wind_dir.z - s * normalized_wind_dir.y,
                              t * normalized_wind_dir.y * normalized_wind_dir.z + s * normalized_wind_dir.x,
                              t * normalized_wind_dir.z * normalized_wind_dir.z + c);

    // Apply the rotation matrix to the vertex position
    VERTEX = (rotation_matrix * VERTEX.xyz);
}

void fragment() {
	vec2 base_uv = UV;

	vec4 albedo_tex = texture(texture_albedo, base_uv);

	// Vertex Color Use as Albedo: Enabled
	albedo_tex *= COLOR;

	ALBEDO = albedo.rgb * albedo_tex.rgb;

	float metallic_tex = dot(texture(texture_metallic, base_uv), metallic_texture_channel);
	METALLIC = metallic_tex * metallic;
	SPECULAR = specular;

	vec4 roughness_texture_channel = vec4(1.0, 0.0, 0.0, 0.0);
	float roughness_tex = dot(texture(texture_roughness, base_uv), roughness_texture_channel);
	ROUGHNESS = roughness_tex * roughness;

	// Emission: Enabled
	vec3 emission_tex = texture(texture_emission, base_uv).rgb;
	// Emission Operator: Add
	EMISSION = (emission.rgb + emission_tex) * emission_energy;
	ALPHA *= albedo.a * albedo_tex.a;
	ALPHA_SCISSOR_THRESHOLD = alpha_scissor_threshold;
}
"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_qlhn6"]
resource_name = "high-grass-1-02"
render_priority = 0
shader = SubResource("Shader_bgchw")
shader_parameter/albedo = Color(1, 1, 1, 1)
shader_parameter/alpha_scissor_threshold = 0.5
shader_parameter/point_size = 1.0
shader_parameter/roughness = 0.48
shader_parameter/metallic_texture_channel = null
shader_parameter/specular = 0.0
shader_parameter/metallic = 0.0
shader_parameter/emission = null
shader_parameter/emission_energy = null
shader_parameter/uv1_scale = Vector3(1, 1, 1)
shader_parameter/uv1_offset = Vector3(0, 0, 0)
shader_parameter/uv2_scale = Vector3(1, 1, 1)
shader_parameter/uv2_offset = Vector3(0, 0, 0)
shader_parameter/sway_speed = 1.5
shader_parameter/sway_strength = 1.5
shader_parameter/sway_phase_len = 1.5
shader_parameter/wind_strength = 0.01
shader_parameter/wind_speed = 1.0
shader_parameter/random_seed = 1.0
shader_parameter/texture_albedo = ExtResource("2_u0y5x")

[sub_resource type="ArrayMesh" id="ArrayMesh_mu4in"]
_surfaces = [{
"aabb": AABB(-0.667099, -0.0378588, -0.70264, 1.2967, 1.2, 1.32966),
"format": 34896613377,
"index_count": 12,
"index_data": PackedByteArray("AAADAAEAAAACAAMABAAHAAUABAAGAAcA"),
"name": "high-grass-1-01",
"primitive": 3,
"uv_scale": Vector4(0, 0, 0, 0),
"vertex_count": 8,
"vertex_data": PackedByteArray("IBsAAEZMAAC35AAAosUAAAAAc7/xOwAA//+71g7WAABJtQAA1h4AAF5SAADE8AAA0cP//wAAAAAxS9LU//8AAA==")
}, {
"aabb": AABB(-0.621456, -0.0378588, -0.589599, 1.37078, 1.2, 1.18227),
"format": 34896613377,
"index_count": 18,
"index_data": PackedByteArray("AAADAAEAAAACAAMABAAHAAUABAAGAAcACAALAAkACAAKAAsA"),
"name": "high-grass-1-02",
"primitive": 3,
"uv_scale": Vector4(0, 0, 0, 0),
"vertex_count": 12,
"vertex_data": PackedByteArray("AAAAAFODAAAa4AAAU4MAAAAA//9TgwAAGuD//1ODAABGXwAAAAAAAKeFAAD//wAARl+ivQAAAACnhfDb//8AAMrVAAA5PwAAJBUAAPnDAAD//9C5JCIAAGcCHsri0AAA")
}]
blend_shape_mode = 0

[sub_resource type="ArrayMesh" id="ArrayMesh_m0wqn"]
resource_name = "uploads_files_3523647_shapespark-low-poly-plants-kit_Plane_209"
_surfaces = [{
"aabb": AABB(-0.667099, -0.0378588, -0.70264, 1.2967, 1.2, 1.32966),
"attribute_data": PackedByteArray("AAD///////8AAAAA//8AAAAA////////AAAAAP//AAA="),
"format": 34896613399,
"index_count": 12,
"index_data": PackedByteArray("AAADAAEAAAACAAMABAAHAAUABAAGAAcA"),
"material": SubResource("ShaderMaterial_kiecd"),
"name": "high-grass-1-01",
"primitive": 3,
"uv_scale": Vector4(0, 0, 0, 0),
"vertex_count": 8,
"vertex_data": PackedByteArray("IBsAAEZMmpa35AAAosWIlgAAc7/xO7aW//+71g7WkJZJtQAA1h6Y0V5SAADE8IzR0cP//wAAq9ExS9LU//+T0fCLW/3/f///0pEO/CuIMP7teq33/3///xV4AfPme0X5")
}, {
"aabb": AABB(-0.621456, -0.0378588, -0.589599, 1.37078, 1.2, 1.18227),
"attribute_data": PackedByteArray("AAD///////8AAAAA//8AAAAA////////AAAAAP//AAAAAP///////wAAAAD//wAA"),
"format": 34896613399,
"index_count": 18,
"index_data": PackedByteArray("AAADAAEAAAACAAMABAAHAAUABAAGAAcACAALAAkACAAKAAsA"),
"material": SubResource("ShaderMaterial_qlhn6"),
"name": "high-grass-1-02",
"primitive": 3,
"uv_scale": Vector4(0, 0, 0, 0),
"vertex_count": 12,
"vertex_data": PackedByteArray("AAAAAFODAIAa4AAAU4MAgAAA//9TgwCAGuD//1ODAIBGXwAAAAAJuaeFAAD///y4Rl+ivQAAJ7mnhfDb//8DucrVAAA5PybqJBUAAPnDJur//9C5JCIn6mcCHsri0Cbq/3////9/////f////3///3OIIvz/f/7/oo5P+WKGE/2Rgvr9/3///9OD/vyZgb3+")
}]
blend_shape_mode = 0
shadow_mesh = SubResource("ArrayMesh_mu4in")

[node name="Node3D" type="Node3D"]

[node name="Grass-03" type="MeshInstance3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, -0.000540972, 0, 0.000686646)
mesh = SubResource("ArrayMesh_m0wqn")
skeleton = NodePath("")
